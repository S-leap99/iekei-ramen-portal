// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init


// prisma/schema.prisma
// ====================
// PostgreSQL データベース設定
// ====================

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["jsonProtocol"]
}

// ====================
// モデル定義：Shop
// ====================
model Shop {
  id             String              @id @default(cuid())
  name           String
  address        String
  lat            Float?              // 緯度
  lng            Float?              // 経度
  paymentMethods Json                @default("[]")
  twitter        String?
  parentId       String?             // 親ノードのID
  parent         Shop?               @relation("ShopToChildren", fields: [parentId], references: [id])
  children       Shop[]              @relation("ShopToChildren")
  createdAt      DateTime            @default(now())
  updatedAt      DateTime            @updatedAt
  stamps         UserStampedShop[]
}

// ====================
// アカウント認証用
// ====================
model User {
  id            String              @id @default(cuid())
  email         String              @unique
  emailVerified DateTime?
  name          String?
  accounts      Account[]
  sessions      Session[]
  stamps        UserStampedShop[]
}

/// ユーザーが付けたスタンプ情報
model UserStampedShop {
  id        String   @id @default(cuid())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  shop      Shop     @relation(fields: [shopId], references: [id], onDelete: Cascade)
  shopId    String
  status    String   // "tabetai" または "tabetta"
  createdAt DateTime @default(now())

  @@unique([userId, shopId])
}

model Account {
  id                String   @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
