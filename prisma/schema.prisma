generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["jsonProtocol"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}


model Brand {
  id     String  @id @default(cuid())   // ← この `id` が...
  name   String  @unique
  shops  Shop[]                         // ← 関連する Shop たち
}

model Shop {
  id        String   @id @default(cuid())
  name      String
  address   String
  lat       Float
  lng       Float
  paymentMethods Json              @default("[]")
  twitter        String?
  parentId       String?
  createdAt      DateTime          @default(now())
  updatedAt      DateTime          @updatedAt
  parent         Shop?             @relation("ShopToChildren", fields: [parentId], references: [id])
  children       Shop[]            @relation("ShopToChildren")
  stamps         UserStampedShop[]  
  brandId   String?                      // ← ここで Brand.id を参照する外部キー
  brand     Brand?   @relation(fields: [brandId], references: [id])
}

model User {
  id            String            @id @default(cuid())
  email         String            @unique
  emailVerified DateTime?
  name          String?
  accounts      Account[]
  sessions      Session[]
  stamps        UserStampedShop[]
}

/// ユーザーが付けたスタンプ情報
model UserStampedShop {
  id        String   @id @default(cuid())
  userId    String
  shopId    String
  status    String
  createdAt DateTime @default(now())
  shop      Shop     @relation(fields: [shopId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, shopId])
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
